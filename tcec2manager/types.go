// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package tcec2manager

import (
	"encoding/json"

	tcclient "github.com/taskcluster/taskcluster-client-go"
)

type (
	// This method returns a list of errors.  It currently gives the error code only
	// because we're not sure of the security implications of exposing the full
	// message.  We do store complete error messages, but are figuring out how to
	// best expose them
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#
	Errors struct {

		// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors
		Errors []struct {

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/az
			Az string `json:"az,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/code
			Code string `json:"code,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/instanceType
			InstanceType string `json:"instanceType,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/message
			Message string `json:"message,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/region
			Region string `json:"region,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/time
			Time tcclient.Time `json:"time,omitempty"`

			// Possible values:
			//   * "instance-request"
			//   * "termination"
			//
			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/type
			Type string `json:"type,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/workerType
			WorkerType string `json:"workerType,omitempty"`
		} `json:"errors,omitempty"`
	}

	// This method provides a summary of the health in the EC2 account being managed.
	// Values for the overall account are provided, broken down by Region, Availability
	// Zone and Instance Type.
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#
	HealthOfTheEC2Account struct {

		// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth
		RequestHealth []json.RawMessage `json:"requestHealth,omitempty"`

		// An overview of currently running instances
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running
		Running []struct {

			// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/az
			Az string `json:"az,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/instanceType
			InstanceType string `json:"instanceType,omitempty"`

			// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/region
			Region string `json:"region,omitempty"`

			// The number of currently running instances in this configuration
			//
			// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/running
			Running int64 `json:"running,omitempty"`
		} `json:"running,omitempty"`

		// See http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth
		TerminationHealth []json.RawMessage `json:"terminationHealth,omitempty"`
	}

	// A list of prices for EC2
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/prices.json#
	ListOfPrices []struct {

		// EC2 instance type
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/instanceType
		InstanceType string `json:"instanceType,omitempty"`

		// Amount of dollars for an hour of usage for this configuration
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/price
		Price float64 `json:"price,omitempty"`

		// EC2 region
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/region
		Region string `json:"region,omitempty"`

		// Possible values:
		//   * "spot"
		//   * "ondemand"
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/type
		Type string `json:"type,omitempty"`

		// EC2 availability zone identifier
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/zone
		Zone string `json:"zone,omitempty"`
	}

	// A list of prices for EC2
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#
	ListOfRestrictionsForPrices []struct {

		// Possible values:
		//   * "instanceType"
		//   * "region"
		//   * "price"
		//   * "minPrice"
		//   * "maxPrice"
		//   * "zone"
		//   * "type"
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/key
		Key string `json:"key,omitempty"`

		// See http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction
		Restriction json.RawMessage `json:"restriction,omitempty"`
	}

	// A list of names of worker types
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/list-worker-types.json#
	ListOfWorkerTypes []string

	// Presented here are the fields that are absolutely 100% required to make a
	// spot request.  The `LaunchSpecification` property is an opaque datastructure
	// from EC2, however the fields which we know are absolutely required are
	// described
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#
	MakeASpotRequest struct {

		// A ClientToken string per the implementation requirements of the EC2 api.
		// This string must be no more than 64 characters of ASCII.  We restrict the
		// client tokens further to alphanumeric ASCII with the addition of the `-`
		// and `_` characters
		//
		// Syntax:     ^[a-zA-Z0-0_-]{1,64}
		// Min length: 1
		// Max length: 64
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/ClientToken
		ClientToken string `json:"ClientToken,omitempty"`

		// This is an EC2-Manager specific wrapping of the request body for the
		// upstream EC2 API.  Values from this are passed through verbatim.  A small
		// number of checks are done on the data before making the call, as well as
		// having some schema keys set to ensure certain values are either present
		// or absent
		//
		// Defined properties:
		//
		//  struct {
		//
		//  	// This is the AMI Identifier for this spot request.  This image must
		//  	// already exist and must be in the region of the request.  Note that
		//  	// AMI images are per-region, so you must copy or regenerate the image
		//  	// for each region.
		//  	//
		//  	// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/ImageId
		//  	ImageID string `json:"ImageId,omitempty"`
		//
		//  	// The instance type to use for this spot request
		//  	//
		//  	// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/InstanceType
		//  	InstanceType string `json:"InstanceType,omitempty"`
		//
		//  	// A valid EC2 KeyPair name.  The KeyPair must already exist
		//  	//
		//  	// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/KeyName
		//  	KeyName string `json:"KeyName,omitempty"`
		//
		//  	// This is a list of the security groups this image will use.  These
		//  	// groups must already exist in the region.
		//  	//
		//  	// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/SecurityGroups
		//  	SecurityGroups []string `json:"SecurityGroups,omitempty"`
		//  }
		//
		// Additional properties allowed
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo
		LaunchInfo json.RawMessage `json:"LaunchInfo,omitempty"`

		// The EC2 region in which this spot request is to be made.  This should be
		// the lower case api-identifier.  For example `us-east-1`
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/Region
		Region string `json:"Region,omitempty"`

		// Specify whether to use a spot request or an on-demand instance.  This is
		// not inferred from the SpotPrice being set or not because we want to allow
		// for the default behaviour for spot prices, which is to use the spot
		// market with a default price of the on-demand price
		//
		// Possible values:
		//   * "spot"
		//   * "on-demand"
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/RequestType
		RequestType string `json:"RequestType,omitempty"`

		// The actual price of the bid.  This is passed directly to the EC2 api and
		// so should not have any internal multipliers (e.g. capacity or utility)
		// applied
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/SpotPrice
		SpotPrice float64 `json:"SpotPrice,omitempty"`
	}

	// Overview of computational resources for a given worker type
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#
	OverviewOfComputationalResources struct {

		// See http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/pending
		Pending []json.RawMessage `json:"pending,omitempty"`

		// See http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/running
		Running []interface{} `json:"running,omitempty"`
	}

	// Overview of computational resources for a given worker type
	//
	// See http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#
	OverviewOfComputationalResources1 struct {

		// See http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#/properties/instances
		Instances []interface{} `json:"instances,omitempty"`
	}

	// See http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#
	SSHPublicKey struct {

		// An OpenSSH format Public Key as described by tools.ietf.org/html/rfc4253#section-6.6
		//
		// Syntax:     ^(ssh-\S*)\s*(\S*)\s*(.*)$
		//
		// See http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#/properties/pubkey
		Pubkey string `json:"pubkey,omitempty"`
	}

	// See http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[0]
	Var float64

	// See http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[1]
	Var1 string

	// See http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[2]
	Var2 []string
)
